    var viewport = {
        dwidth: 0,
        dheight: 0,
        counter: 0,
        draw : function(playerX, playerY) {
            ctx = game.properties.context;
            ctx.save();
            ctx.clearRect(-xMovement, -yMovement, 500, 300);
            dwidth = xbase + xMovement;
            dheight = ybase + yMovement;
            ctx.drawImage(world, dwidth, dheight, 1000, 1000, 0, 0, 1000, 1000);
            ctx.translate(xbase + xMovement, ybase + yMovement);
            ctx.restore();
        },
    };
    
    function component(width, height, color, x, y) {
        this.width = width;
        this.height = height;
        this.speedX = 0;
        this.speedY = 0;    
        this.x = x;
        this.y = y;
        this.top = "open";
        this.left = "open";
        this.down = "open";
        this.right = "open";
        this.diameterTop = this.y - 25;
        this.diameterRight = this.x + 25;
        this.diameterDown = this.y + 25;
        this.diameterLeft = this.x - 25;
        this.first = function() {
            ctx = game.properties.context;
            ctx.fillStyle = "#0000A0";
            ctx.fillRect(xbase, ybase, this.width, this.height);
        };
        this.newPos = function() {
            this.top = "open";
            this.left = "open";
            this.down = "open";
            this.right = "open";
            this.diameterTop = this.y - 25;
            this.diameterRight = this.x + 25;
            this.diameterDown = this.y + 25;
            this.diameterLeft = this.x - 25;
        };    
    }
    
    function calculateDistance(call) {
        
        for(var i = 0; i < obstaclesPos.length; i++) {
           if(Math.abs(player.diameterDown - obstaclesPos[i][2]) <= 5 &&
              player.diameterRight >= obstaclesPos[i][5] &&
              player.diameterLeft <= obstaclesPos[i][3]) {
                player.down = "blocked";
                console.log("Down blocked");
           }
           if(Math.abs(player.diameterRight - obstaclesPos[i][5]) <= 5 &&
              player.diameterTop <= obstaclesPos[i][4] &&
              player.diameterDown >= obstaclesPos[i][2]) {
                player.right = "blocked";
                console.log("right blocked");
           }
           if(Math.abs(player.diameterTop - obstaclesPos[i][4]) <= 5 &&
              player.diameterRight >= obstaclesPos[i][5] &&
              player.diameterLeft <= obstaclesPos[i][3]) {
                player.top = "blocked";
                console.log("top blocked");
           }
           if(Math.abs(player.diameterLeft - obstaclesPos[i][3]) <= 5 &&
              player.diameterTop <= obstaclesPos[i][4] &&
              player.diameterDown >= obstaclesPos[i][2]) {
                player.left = "blocked";
                console.log("left blocked");
           }
        }
        
            if(game.controls.left && player.left == "blocked") {
                player.speedX = 0;
            }
            if (game.controls.right && player.right == "blocked") {
                player.speedX = 0;
            }
            if(game.controls.down && player.down == "blocked") {
                player.speedY = 0;
            }
            if(game.controls.top && player.top == "blocked") {
                player.speedY = 0;
            }
            player.x += player.speedX;
            player.y += player.speedY;
            /*console.log(player.speedX);
            console.log(player.speedY);*/
            if(call == 'draw2') {
                xMovement2 += player.speedX;
                yMovement2 += player.speedY;
                xcamMove += player.speedX;
                ycamMove += player.speedY;
            }
            else {
                xMovement += player.speedX;
                yMovement += player.speedY;
            }
    }
    
    function gameObstacle (x, y, width, height) {
        this.diameterTop = y - (height/2);
        this.diameterRight = x + (width/2);
        this.diameterDown = y + (height/2);
        this.diameterLeft = x - (width/2);
        ctx = game.properties.context;
        ctx.fillStyle = "green";
        ctx.fillRect(x, y, width, height);
        obstaclesPos.push([x, y, this.diameterTop, this.diameterRight, this.diameterDown, this.diameterLeft]);
        obstaclesSize.push([width, height]);
    }
    
    game.update = function () {
        player = game.properties.player;
        player.speedX = 0;
        player.speedY = 0;
        if (game.controls.left == true) {player.speedX = -5; }
        if (game.controls.right == true) {player.speedX = 5; }
        if (game.controls.up == true) {player.speedY = -5; }
        if (game.controls.down == true) {player.speedY = 5; }
        console.log(player.x);
        console.log(player.y);
        
        player.newPos();
        /*if(player.x >= 700 || player.y <= -100 || player.x <= 100 || player.y >= 350) {
            console.log("method2");
            if(player.x >= 700) {
                player.right = "blocked";
            }
            if(player.x <= 100) {
                player.left = "blocked";
            }
            if(player.y <= 100) {
                player.top = "blocked";
            }
            if(player.y >= 350) {
                player.down = "blocked";
            }
             /*gameArea.update2(xMovement2, yMovement2, xcamMove, ycamMove);
        }*/
        calculateDistance();
        viewport.counter = 0;
        xcamMove = 0;
        ycamMove = 0;
        console.log(player.x);
        console.log(player.y);
        viewport.draw(player.x, player.y);
        game.obstacle(player.speedX, player.speedY);
        game.properties.context.fillStyle = "#0000A0";
        game.properties.context.fillRect(xbase + player.speedX, ybase + player.speedY, player.width, player.height);
    };