/*protected function healthCheck($chain, $key, $i, $method) {
                switch($method) {
                    case "warriors":
                        $array = $this->warriors;
                        break;
                    case "daqloons":
                        $array = $this->daqloons;
                        break;
                }
                print "healthcheck!";
                if($key['health'] < 15) {
                    for($x = 0; $x < count($array); $x++) {
                        if($array[$x]['health'] > 10) {
                            $key = $array[$x];
                            break;
                        }
                        else {
                            "None found!";
                        }
                    }
                    unset($array[$i]);
                }
                return $key;
        }*/
        
        
        public function getResult() {
            //Get levels of the soldiers, armour and weapons
            $sql = "SELECT warrior_id FROM warriors WHERE mission=2 AND username=:username";
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(":username", $param_username, PDO::PARAM_STR);
            $param_username = $this->adventure_data['warrior'];
            $stmt->execute();
            $warriors = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $query_array = array();
            foreach($warriors as $key) {
                array_push($query_array, $key['warrior_id']);
            }
            $query_array[] = $this->adventure_data['warrior'];
            $in  = str_repeat('?,', count($query_array) - 2) . '?';
            
            $sql = "SELECT warrior_id, type, health FROM warriors WHERE warrior_id IN ($in) AND username=?";
            $stmt = $this->conn->prepare($sql);
            $stmt->execute($query_array);
            $warrior_data = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $sql = "SELECT stamina_level, technique_level, precision_level, strength_level FROM warrior_levels
                    WHERE warrior_id IN ($in) AND username=?";
            $stmt = $this->conn->prepare($sql);
            $stmt->execute($query_array);
            $warrior_levels = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $sql = "SELECT attack, defence FROM warrior_armory WHERE warrior_id IN ($in) AND username=?";
            $stmt = $this->conn->prepare($sql);
            $stmt->execute($query_array);
            $stats = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $this->warriors = array();
            for($q = 0; $q < count($warrior_data); $q++) {
                $this->warriors[$q] = array_merge($warrior_data[$q], $warrior_levels[$q], $stats[$q]);
            }
            
            //Get the strength of daqloon
            $sql = "SELECT stats, amount FROM daqloon_stats WHERE difficulty=:difficulty AND location=:location";
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(":difficulty", $param_difficulty, PDO::PARAM_STR);
            $stmt->bindParam(":location", $param_location, PDO::PARAM_STR);
            $param_difficulty = $this->adventure_data['difficulty'];
            $param_location = $this->adventure_data['location'];
            $stmt->execute();
            $daqloon = $stmt->fetch(PDO::FETCH_ASSOC);
            $split = explode("+", $daqloon['stats']);
            $daqloon['attack'] = $split[0];
            $daqloon['defence'] = $split[1];
            $this->daqloons = array();
            $daqloon_amount = 2;
            for($i = 0; $i < $daqloon_amount; $i++) {
                $this->daqloons[$i] = array("health" => rand(100,120), "id" => $i+1, "attack" => $daqloon['attack'] - rand(1,3),
                                      "defence" => $daqloon['defence'] - rand(1,3));
            }
            $battle_result;
            $duration = 0;
            do {
                print "</br>";
                for($i = 0; $i < count($this->warriors); $i++) {
                    $daqloon = $this->daqloons[$i];
                    $warrior = $this->warriors[$i];
                    //Remove warriors who are wounded from $warrior
                    if(array_key_exists($this->warriors[$i]['warrior_id'], $this->warrior_status) == true) {
                        unset($this->warriors[$i]);
                        $this->warriors = array_values($this->warriors);
                        var_dump($this->warriors);
                        print "continue" . "</br>";
                        continue;
                    }
                    $first = rand(1,2);
                    
                    
                    if($duration % 3 === 0 && $this->warriors['type'] === 'ranged') {
                        $this->warriors[$i] = $this->daqloonHit($daqloon, $warrior);   
                    }
                    else if($first === 1) {
                        $this->daqloons[$i] = $this->warriorHit($daqloon, $warrior, $duration);
                        $this->warriors[$i] = $this->daqloonHit($daqloon, $warrior);
                    }
                    else {
                        $this->warriors[$i] = $this->daqloonHit($daqloon, $warrior);
                        $this->daqloons[$i] = $this->warriorHit($daqloon, $warrior, $duration);
                    }
                    $daqloon_count = count($this->daqloons);
                    $warrior_count = count($this->warriors);
                    var_dump($daqloon_count);
                    var_dump($warrior_count);
                    if($daqloon_count != $warrior_count) {
                        ($daqloon_count > $warrior_count) ? $array = "daqloons" : $array = "warriors";
                        print "switch" . "</br>";
                        switch($array) {
                            case "daqloons":
                                $count = $daqloon_count - $warrior_count;
                                for ($w = 0; $w < $count; $w++) {
                                    $this->warriors[$i] = $this->daqloonHit($this->daqloons[$i], $this->warriors[$i]);
                                }
                                break;
                            case "warriors":
                                $count = $warrior_count - $daqloon_count;
                                for ($w = 0; $w < $count; $w++) {
                                    $this->daqloons[$i] = $this->warriorHit($this->daqloons[$i], $this->warrior[$i]);
                                }
                                break;
                        }
                    }
                }
                if(count($this->warrior_status) == count($warrior_data)) {
                    $battle_result = 0;
                    print "loss";
                    break;
                }
                else if(count($this->daqloon_status) == $daqloon_amount) {
                    $battle_result = 1;
                    print "wins";
                    break;
                }
                $duration++;
                if($duration == 20) {
                    print "break";
                    break;
                }
            }
            while(empty($battle_result));
            
            
            $update_data = array();
            
            for($i = 0; $i < count($this->warriors); $i++) {
                $update_data[$i] = array($this->warriors[$i]['health'], $this->warriors[$i]['warrior_id'], $this->username);
            }            
            try {
                $this->conn->beginTransaction();
                
                $sql = "UPDATE adventures SET battle_result=:battle_result WHERE adventure_id=:adventure_id";
                $stmt = $this->conn->prepare($sql);
                $stmt->bindParam(":battle_result", $param_battle_result, PDO::PARAM_STR);
                $stmt->bindParam(":adventure_id", $param_adventure_id, PDO::PARAM_STR);
                $param_battle_result = $battle_result;
                $param_adventure_id = $this->adventure_data['adventure_id'];
                $stmt->execute();
                
                $sql2 = "UPDATE warriors SET health = ? WHERE warrior_id = ? AND username = ?";
                $stmt2 = $this->conn->prepare($sql2);
                foreach($update_data as $key) {
                    $stmt2->execute($key);
                }
                
                $this->conn->commit();
            }
            catch(Exception $e) {
                $this->conn->rollBack();
                new ajaxexception($e->getFile(), $e->getLine(), $e->getMessage());
                $this->gameMessage("ERROR: Something unexpected happened, please try again", true);
                return false;
            }
            echo ($battle_result == 1) ? "Battle resulted in a win!" : "Battle resulted in a loss";
        }